name: Weekly Figma Calculation

on:
  schedule:
    # Run every Monday at 2:00 AM
    - cron: '0 2 * * 1'
  # Enable manual triggering
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository to push to (format: owner/repo)'
        required: false
        default: 'hoshki-ic/test-repo'
      target_path:
        description: 'Path within target repository'
        required: false
        default: 'test-output'
      test_mode:
        description: 'Run in test mode'
        type: boolean
        required: false
        default: true
      use_real_data:
        description: 'Use real Figma data instead of test data'
        type: boolean
        required: false
        default: false
  # Test trigger
  push:
    branches:
      - test-automation

jobs:
  run-calculations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: List files before install
        run: |
          ls -la
          ls -la src || echo "src directory not found"

      - name: Install dependencies
        run: npm ci

      - name: Check TSConfig
        run: |
          echo "Content of tsconfig.build.json:"
          cat tsconfig.build.json
          echo "Content of tsconfig.json:"
          cat tsconfig.json || echo "tsconfig.json not found"

      - name: Build project with debug
        run: |
          echo "Running build command..."
          npm run build
          echo "Build completed"
          echo "Checking dist directory:"
          ls -la dist || echo "dist directory not found"
          echo "Checking examples directory:"
          ls -la dist/examples || echo "dist/examples directory not found"

      # Only create the mock script if not using real data
      - name: Create test data file
        if: ${{ github.event.inputs.use_real_data != 'true' }}
        run: |
          echo "Creating test data file..."
          mkdir -p dist/examples
          echo 'console.log("Test run completed successfully"); console.log({"test":"data"});' > dist/examples/allfiles.js
          echo 'console.log("Creating test output file..."); const fs = require("fs"); fs.writeFileSync("./team-breakdown-ready-for-dev-test.json", JSON.stringify({"test":"data"}));' >> dist/examples/allfiles.js
          echo "Content of test script:"
          cat dist/examples/allfiles.js

      # Create a .env file with the secrets
      - name: Create .env file
        if: ${{ github.event.inputs.use_real_data == 'true' }}
        run: |
          echo "Creating .env file with secrets..."
          echo "FIGMA_API_TOKEN=${{ secrets.FIGMA_API_TOKEN }}" > .env
          echo "FIGMA_STYLE_TEAM_ID=${{ secrets.FIGMA_STYLE_TEAM_ID }}" >> .env
          echo "FIGMA_TEAM_IDS=${{ secrets.FIGMA_TEAM_IDS }}" >> .env
          echo "FIGMA_DESIGN_SYSTEM_FILE_KEY=${{ secrets.FIGMA_DESIGN_SYSTEM_FILE_KEY }}" >> .env
          echo ".env file created (contents hidden for security)"

      # Run the real calculation script if use_real_data is true
      - name: Run real Figma calculations
        if: ${{ github.event.inputs.use_real_data == 'true' }}
        run: |
          echo "Running real Figma calculations script..."
          # Use npm run example instead of directly calling node
          npm run example

      # Run the mock script if not using real data
      - name: Run mock script
        if: ${{ github.event.inputs.use_real_data != 'true' }}
        run: |
          echo "Running mock script..."
          node ./dist/examples/allfiles.js

      - name: Set target repository
        id: target_repo
        run: |
          # Set default values (using test repo for now)
          TARGET_REPO="${{ github.event.inputs.target_repo || 'hoshki-ic/test-repo' }}"
          TARGET_PATH="${{ github.event.inputs.target_path || 'test-output' }}"

          # If triggered by push to test-automation branch, use test repository
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/test-automation" ]]; then
            TARGET_REPO="${{ secrets.TEST_TARGET_REPO || 'hoshki-ic/test-repo' }}"
            TARGET_PATH="${{ secrets.TEST_TARGET_PATH || 'test-output' }}"
            echo "Running in test mode due to push to test-automation branch"
          fi

          # If test_mode input is true, use test repository
          if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
            TARGET_REPO="${{ secrets.TEST_TARGET_REPO || 'hoshki-ic/test-repo' }}"
            TARGET_PATH="${{ secrets.TEST_TARGET_PATH || 'test-output' }}"
            echo "Running in test mode due to workflow_dispatch input"
          fi

          echo "repo=$TARGET_REPO" >> $GITHUB_OUTPUT
          echo "path=$TARGET_PATH" >> $GITHUB_OUTPUT

      # Verify test file exists
      - name: Check for output file
        run: |
          echo "Checking for output files..."
          ls -la .
          ls -la ./team-breakdown-ready-for-dev-*.json || echo "No team breakdown files found"
          ls -la ./all-pages-*.json || echo "No all-pages files found"

      - name: Debug settings
        run: |
          echo "Target Repository: ${{ steps.target_repo.outputs.repo }}"
          echo "Target Path: ${{ steps.target_repo.outputs.path }}"

      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.target_repo.outputs.repo }}
          path: target-repo
          token: ${{ secrets.TARGET_REPO_PAT }}

      - name: Copy JSON files to target repository
        run: |
          # Get the most recent team breakdown file or use the test file
          TEAM_BREAKDOWN_FILE=$(ls -t ./team-breakdown-ready-for-dev-*.json 2>/dev/null | head -1 || echo "not-found")

          if [ "$TEAM_BREAKDOWN_FILE" = "not-found" ]; then
            # Try with all-pages files
            TEAM_BREAKDOWN_FILE=$(ls -t ./all-pages-*.json 2>/dev/null | head -1 || echo "not-found")
          fi

          if [ "$TEAM_BREAKDOWN_FILE" = "not-found" ]; then
            echo "No output files found. Creating one now."
            echo '{"test":"data","created":"through-workflow"}' > team-breakdown-ready-for-dev-test.json
            TEAM_BREAKDOWN_FILE="team-breakdown-ready-for-dev-test.json"
          fi

          echo "Using file: $TEAM_BREAKDOWN_FILE"

          # Copy the file to the target location
          mkdir -p "target-repo/${{ steps.target_repo.outputs.path }}"
          cp "$TEAM_BREAKDOWN_FILE" "target-repo/${{ steps.target_repo.outputs.path }}/figma-adoption-data.json"

      - name: Commit and push to target repository
        run: |
          cd target-repo
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

          git add "${{ steps.target_repo.outputs.path }}/figma-adoption-data.json"

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Figma adoption data [automated]"
            git push
          fi
